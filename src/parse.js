
var Parse = (function() {
  /**
   * The Lexer takes the original expression string and returns an array of tokens parsed from that string
   */
  function Lexer() {

  }
  Lexer.prototype.lex = function(text) {

  };

  /**
   * The AST Builder takes the array of tokens generated by the lexer, and builds up an Abstract Syntax Tree (AST) from them
   */
  function AST(lexer) {

  }
  AST.prototype.ast = function(text) {

  };

  /**
   * The AST Compiler takes the abstract syntax tree and compiles it into a JavaScript function that evaluates the expression represented in the tree.
   */
  function ASTCompiler(astBuilder) {

  }
  ASTCompiler.prototype.compile = function(text) {

  };

  /**
   * The Parser is responsible for combining the low-level steps mentioned above.
   */
  function Parse() {

  }
  Parse.prototype.parse = function(expr) {
    return function(scope) {

    };
  };

  return Parse;
}());
